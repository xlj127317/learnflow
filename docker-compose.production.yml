services:
  # PostgreSQL 数据库 - 优化内存使用
  postgres:
    image: postgres:15-alpine
    container_name: learnflow-postgres
    restart: always
    environment:
      POSTGRES_DB: learnflow
      POSTGRES_USER: learnflow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-learnflow_password}
      # 优化PostgreSQL配置
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      # 内存优化配置
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    ports:
      - "127.0.0.1:5432:5432"  # 只允许本地访问
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/migrations:/docker-entrypoint-initdb.d
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learnflow_user -d learnflow"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - learnflow-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 后端服务 - 优化内存和CPU使用
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.production
    container_name: learnflow-backend
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://learnflow_user:${POSTGRES_PASSWORD:-learnflow_password}@postgres:5432/learnflow
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      PORT: 3000
      HOST: 0.0.0.0
      # AI服务配置
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_BASE_URL: ${OPENROUTER_BASE_URL:-https://openrouter.ai/api/v1}
      OPENROUTER_MODEL: ${OPENROUTER_MODEL:-gpt-3.5-turbo}
      OPENROUTER_MAX_TOKENS: ${OPENROUTER_MAX_TOKENS:-4000}
      OPENROUTER_TEMPERATURE: ${OPENROUTER_TEMPERATURE:-0.7}
      # 安全配置
      CORS_ORIGIN: ${CORS_ORIGIN:-http://127.0.0.1:8080}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      # Node.js 内存优化
      NODE_OPTIONS: "--max-old-space-size=512"
    ports:
      - "127.0.0.1:3000:3000"  # 只允许本地访问
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - learnflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 前端服务 - 使用轻量级Nginx
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.production
    container_name: learnflow-frontend
    restart: always
    ports:
      - "127.0.0.1:80:80"  # 只允许本地访问
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - learnflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx 反向代理 - 优化配置
  nginx:
    image: nginx:alpine
    container_name: learnflow-nginx
    restart: always
    ports:
      - "127.0.0.1:8080:80"  # 只允许本地访问
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - learnflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# 网络配置
networks:
  learnflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local

